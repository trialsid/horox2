The ability to immediately stop the horoscope playback when the "Stop Horoscope" button (which triggers the "Kill Switch" logic) is clicked is achieved through a combination of client-side and server-side mechanisms, primarily using Socket.IO for real-time communication and a threading event to signal the stopping process.

Here's a breakdown of how it works:

1. Client-Side (Clicking "Stop Horoscope")

Event Listener: The "Stop Horoscope" button has an event listener attached to it:

document.getElementById("kill-switch-btn").addEventListener("click", function () {
  // Show the confirmation modal
  var confirmStopModal = new bootstrap.Modal(
    document.getElementById("confirm-stop-modal")
  );
  confirmStopModal.show();
});
Use code with caution.
JavaScript
Confirmation Modal: This code shows a confirmation modal to prevent accidental clicks.

"Confirm Stop" in Modal: The "Confirm Stop" button inside the modal has another listener:

document
  .getElementById("confirm-stop-btn")
  .addEventListener("click", function () {
    // Emit the stop_process event
    socket.emit("stop_process");

    // ... (hide modal, update UI) ...
  });
Use code with caution.
JavaScript
Socket.IO stop_process Event: When the user confirms, the client emits a stop_process event to the server using socket.emit("stop_process");. This is the crucial step that signals the server to stop the horoscope playback.

2. Server-Side (Handling stop_process)

SocketIO Event Handler: The server has a Socket.IO event handler that listens for the stop_process event:

@socketio.on('stop_process')
def handle_stop_process():
    global kill_flag
    global current_horoscope_text
    logger.info("Kill switch activated")
    kill_flag.set()  # Activate the kill flag

    stop_speech()

    # Reset current_horoscope_text to empty string
    current_horoscope_text = ""

    # Emit a message to the client to update the UI
    socketio.emit('process_killed', {
        'message': 'Process ended abruptly',
        'show_start_again': True
    })
Use code with caution.
Python
kill_flag (Threading Event):

kill_flag = threading.Event() is a threading event object. Think of it as a global flag that different parts of the code can check.

kill_flag.set(): When the stop_process event is received, kill_flag.set() is called. This sets the flag to True, signaling that the process should be stopped.

stop_speech() Function:

This function attempts to stop the Azure Text-to-Speech synthesis:

@app.route("/stop_speech", methods=["POST"])
def stop_speech():
    global speech_synthesizer
    global speech_status
    with synthesis_lock:
      if speech_synthesizer:
          try:
              speech_synthesizer.stop_speaking_async().get()
              speech_status["interrupted"] = True
              return jsonify({"success": True})
          except Exception as e:
              logger.error(f"Error stopping speech synthesis: {e}")
              return jsonify({"success": False, "error": str(e)})
      else:
          return jsonify({"success": False, "error": "Speech synthesis not active"})
Use code with caution.
Python
*   `speech_synthesizer.stop_speaking_async().get()`: This is the Azure TTS SDK call that tries to immediately stop the ongoing speech synthesis.
Use code with caution.
Resetting current_horoscope_text: The server also resets the current_horoscope_text variable to an empty string.

Emitting process_killed: The server emits a process_killed event back to the client to update the UI accordingly.

3. Server-Side (Inside speak_text)

Checking kill_flag: The speak_text function (which runs in a separate thread) periodically checks the status of the kill_flag:

def speak_text(text, completion_callback):
    # ...

    if kill_flag.is_set():
        logger.info("Kill flag is set, skipping TTS")
        completion_callback(False, None, None, "TTS skipped due to kill flag")
        return

    # ... (rest of the TTS code) ...
Use code with caution.
Python
Early Exit: If kill_flag.is_set() returns True (meaning the "Stop Horoscope" button was clicked), the speak_text function immediately stops its execution and calls the completion_callback with an indication that the process was interrupted.

4. Client-Side (Handling process_killed)

SocketIO Event Listener: The client has a Socket.IO listener for the process_killed event:

socket.on("process_killed", function (data) {
  document.getElementById("message-container").textContent = data.message;
  document.getElementById("new-start-btn").style.display =
    data.show_start_again ? "block" : "none";
});
Use code with caution.
JavaScript
UI Update: The client updates the UI based on the received message (e.g., displaying "Process ended abruptly").

In Summary:

The "Stop Horoscope" button triggers a Socket.IO event (stop_process).

The server receives the event, sets the kill_flag, and calls stop_speech().

stop_speech() attempts to stop Azure TTS.

The speak_text function (running in a separate thread) periodically checks kill_flag and exits if it's set.

The server emits a process_killed event to the client.

The client updates the UI accordingly.

This combination of a threading event (kill_flag) and real-time communication via Socket.IO allows for a responsive and immediate interruption of the horoscope playback when the user clicks the "Stop Horoscope" button.